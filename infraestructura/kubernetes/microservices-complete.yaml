# Microservicios Consolidados para Food Ordering System
# Este archivo contiene todos los microservicios del sistema

---
# Customer Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: customer-service
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: customer-service
  template:
    metadata:
      labels:
        app: customer-service
    spec:
      containers:
      - name: customer-service
        image: customer-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8184
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8184
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8184
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: customer-service
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8184
    targetPort: 8184
    protocol: TCP
  selector:
    app: customer-service
---
# Payment Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-service
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: payment-service
  template:
    metadata:
      labels:
        app: payment-service
    spec:
      containers:
      - name: payment-service
        image: payment-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8182
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8182
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8182
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: payment-service
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8182
    targetPort: 8182
    protocol: TCP
  selector:
    app: payment-service
---
# Restaurant Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: restaurant-service
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: restaurant-service
  template:
    metadata:
      labels:
        app: restaurant-service
    spec:
      containers:
      - name: restaurant-service
        image: restaurant-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8183
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        - name: KAFKA_CONSUMER_CONFIG_RESTAURANT_APPROVAL_CONSUMER_GROUP_ID
          value: "restaurant-approval-consumer-group"
        - name: KAFKA_CONSUMER_CONFIG_PAYMENT_CONSUMER_GROUP_ID
          value: "payment-consumer-group"
        - name: KAFKA_CONSUMER_CONFIG_ORDER_CONSUMER_GROUP_ID
          value: "order-consumer-group"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8183
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8183
          initialDelaySeconds: 30
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: restaurant-service
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8183
    targetPort: 8183
    protocol: TCP
  selector:
    app: restaurant-service
---
# Order Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
    spec:
      containers:
      - name: order-service
        image: order-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8181
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        - name: KAFKA_CONSUMER_CONFIG_RESTAURANT_APPROVAL_CONSUMER_GROUP_ID
          value: "restaurant-approval-consumer-group"
        - name: KAFKA_CONSUMER_CONFIG_PAYMENT_CONSUMER_GROUP_ID
          value: "payment-consumer-group"
        - name: KAFKA_CONSUMER_CONFIG_ORDER_CONSUMER_GROUP_ID
          value: "order-consumer-group"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8181
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8181
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8181
    targetPort: 8181
    protocol: TCP
  selector:
    app: order-service
---
# Consulta Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: consulta-service
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consulta-service
  template:
    metadata:
      labels:
        app: consulta-service
    spec:
      containers:
      - name: consulta-service
        image: consulta-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8185
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8185
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8185
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: consulta-service
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8185
    targetPort: 8185
    protocol: TCP
  selector:
    app: consulta-service
---
# API Gateway
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api-gateway
  namespace: kafka-infrastructure
spec:
  replicas: 1
  selector:
    matchLabels:
      app: api-gateway
  template:
    metadata:
      labels:
        app: api-gateway
    spec:
      containers:
      - name: api-gateway
        image: api-gateway-service:latest
        imagePullPolicy: Never
        ports:
        - containerPort: 8080
        env:
        - name: POSTGRES_HOST
          value: "postgres"
        - name: POSTGRES_PORT
          value: "5432"
        - name: POSTGRES_DB
          value: "postgres"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "admin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-broker-1:9092,kafka-broker-2:9092,kafka-broker-3:9092"
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 10
---
apiVersion: v1
kind: Service
metadata:
  name: api-gateway
  namespace: kafka-infrastructure
spec:
  type: LoadBalancer
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
  selector:
    app: api-gateway
