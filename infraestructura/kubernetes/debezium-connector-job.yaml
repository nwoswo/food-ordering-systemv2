apiVersion: batch/v1
kind: Job
metadata:
  name: debezium-connector-setup
  namespace: kafka-infrastructure
spec:
  template:
    spec:
      containers:
      - name: debezium-connector-setup
        image: curlimages/curl:latest
        command:
        - /bin/sh
        - -c
        - |
          echo "=== Debezium Connector Setup Job Started ==="
          
          # Function to check if Kafka Connect is ready
          check_kafka_connect() {
            echo "Checking Kafka Connect availability..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://kafka-connect:8083/)
            if [ "$response" = "200" ]; then
              echo "Kafka Connect is ready (HTTP $response)"
              return 0
            else
              echo "Kafka Connect not ready yet (HTTP $response)"
              return 1
            fi
          }
          
          # Function to check if connector already exists
          check_connector_exists() {
            echo "Checking if connector already exists..."
            response=$(curl -s -o /dev/null -w "%{http_code}" http://kafka-connect:8083/connectors/order-outbox-connector)
            if [ "$response" = "200" ]; then
              echo "Connector already exists"
              return 0
            else
              echo "Connector does not exist (HTTP $response)"
              return 1
            fi
          }
          
          # Function to delete existing connector
          delete_connector() {
            echo "Deleting existing connector..."
            curl -X DELETE http://kafka-connect:8083/connectors/order-outbox-connector
            sleep 5
          }
          
          # Function to register connector
          register_connector() {
            echo "Registering Debezium connector..."
            
            # Verify the JSON file exists and is readable
            if [ ! -f "/config/order-outbox-connector.json" ]; then
              echo "ERROR: JSON file not found at /config/order-outbox-connector.json"
              ls -la /config/
              return 1
            fi
            
            echo "JSON file content:"
            cat /config/order-outbox-connector.json
            
            response=$(curl -s -w "%{http_code}" -X POST \
              -H "Content-Type: application/json" \
              --data @/config/order-outbox-connector.json \
              http://kafka-connect:8083/connectors)
            
            http_code="${response: -3}"
            response_body="${response%???}"
            
            echo "Registration response (HTTP $http_code): $response_body"
            
            if [ "$http_code" = "201" ] || [ "$http_code" = "409" ]; then
              echo "Connector registered successfully or already exists"
              return 0
            else
              echo "Failed to register connector"
              return 1
            fi
          }
          
          # Function to check connector status
          check_connector_status() {
            echo "Checking connector status..."
            response=$(curl -s http://kafka-connect:8083/connectors/order-outbox-connector/status)
            echo "Connector status: $response"
          }
          
          # Main execution
          echo "Waiting for Kafka Connect to be ready..."
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            if check_kafka_connect; then
              break
            fi
            echo "Attempt $attempt/$max_attempts - Waiting 10 seconds..."
            sleep 10
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "ERROR: Kafka Connect did not become ready within the expected time"
            exit 1
          fi
          
          echo "Kafka Connect is ready!"
          
          # Check if connector already exists
          if check_connector_exists; then
            echo "Connector already exists. Checking status..."
            check_connector_status
            echo "Connector setup completed successfully!"
            exit 0
          fi
          
          # Register the connector
          if register_connector; then
            echo "Waiting for connector to start..."
            sleep 10
            
            # Check connector status
            check_connector_status
            
            echo "=== Debezium Connector Setup Completed Successfully ==="
          else
            echo "ERROR: Failed to register Debezium connector"
            exit 1
          fi
        volumeMounts:
        - name: connector-config
          mountPath: /config
      volumes:
      - name: connector-config
        configMap:
          name: debezium-connector-config
      restartPolicy: OnFailure
  backoffLimit: 5
